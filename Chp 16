#Chapter 16

Get-Service | Stop-Service -WhatIf
Get-Service -Name BITS| Stop-Service -PassThru

Get-WmiObject win32_networkadapterconfiguration
Get-WmiObject win32_networkadapterconfiguration -Filter "description like '%Intel%'" 
Get-WmiObject win32_networkadapterconfiguration -Filter "description like 'Intel%'" |
Get-Member -MemberType Methods
Get-WmiObject win32_networkadapterconfiguration -Filter "description like 'Intel%'" |
Invoke-WmiMethod -Name EnableDHCP

Get-CimClass Win32_NetworkAdapterConfiguration 
Get-CimClass Win32_NetworkAdapterConfiguration | Select-Object -ExpandProperty CimClassMethods

Get-CimInstance win32_networkadapterconfiguration -Filter "description like 'Intel%'" |
Invoke-CimMethod -MethodName EnableDHCP -WhatIf

Get-WmiObject win32_service -Filter "name = 'BITS'" | Get-Member
#Book shows the example where Invoke-WMI Method doesn't work well with the change method
#The method accepts multiple arguments

Get-WmiObject win32_service -Filter "name = 'BITS'" | 
Invoke-WmiMethod -Name change -ArgumentList $null,$null,$null,$null,$null,$null,$null,"P@ssw0rd"

Get-WmiObject win32_service -Filter "name = 'BITS'" | 
ForEach-Object {
$_.change($null,$null,$null,$null,$null,$null,$null,"P@ssw0rd")
$_.name
"PAT Feder did this!!!!"}

#The following are all equivalent
Get-Service -Name BITS | Stop-Service
Get-Service -Name BITS | ForEach-Object {$_.stop()}
Get-WmiObject Win32_Service -Filter "name LIKE 'BITS'" | gm
Get-WmiObject Win32_Service -Filter "name LIKE 'BI%'" | Invoke-WmiMethod -Name StopService
Get-WmiObject Win32_Service -Filter "name LIKE 'BI%'" | ForEach-Object {$_.StopService()}
Stop-Service -name BITS

Get-CimClass Win32_Service | select -ExpandProperty CimClassMethods
Get-CimInstance Win32_Service -Filter "name LIKE 'BI%'" | Invoke-CimMethod -MethodName StopService

#1
Get-Service | Get-Member -MemberType Methods
gsv bits| Stop-Service

#2
gps | gm
#3
Get-CimClass Win32_Process | Select-Object -ExpandProperty CimClassMethods
