<#
.Synopsis
Configure IP Address
.Description
Configure IP Address
.Parameter IP
The IP Address to configure the system with
.Parameter DNS
The DNS Address to configure system with
.Parameter Subnet
The Subnet Mask to configure system with.  Specified as number of bits
.Parameter ComputerName
The ComputerName to configure system with

.Example
PS .\ConfigIP.ps1 -IP "192.168.222.20" -DNS "192.168.222.10" -Subnet 24 -ComputerName "DC2" -DFG "192.168.222.201"
#>
#[cmdletbinding()]   #Must be the first line after comment-based help, adds advanced features
Param (
[Parameter(Mandatory=$True)]
[string]$ComputerName,
[Parameter(Mandatory=$True)]
[string]$IP,
[Parameter(Mandatory=$True)]
[string]$DNS,
[Parameter(Mandatory=$True)]
[int]$Subnet,
[Parameter(Mandatory=$True)]
[string]$DFG
)
write-verbose "Configuring the following"
write-verbose "ComputerName = $ComputerName"
write-verbose "IP = $IP"
write-verbose "DNS = $DNS"
write-verbose "Subnet Mask = $Subnet"
write-verbose "Default Gateway = $DFG"

$ifIndex = Get-NetAdapter -Physical | Select-Object -ExpandProperty ifIndex

#Remove IP address
$interface = Get-NetAdapter -Physical | Get-NetIPInterface -AddressFamily "IPv4"
If ($interface.Dhcp -eq "Disabled") {
 # Remove existing gateway
If (($interface | Get-NetIPConfiguration).Ipv4DefaultGateway) {$interface | Remove-NetRoute -Confirm:$false}
 # Enable DHCP
 $interface | Set-NetIPInterface -DHCP Enabled
 # Configure the DNS Servers automatically
 $interface | Set-DnsClientServerAddress -ResetServerAddresses
}

$ifIndex = Get-NetAdapter -Physical | Select-Object -ExpandProperty ifIndex

New-netIPAddress -IPAddress $IP -PrefixLength $Subnet -DefaultGateway $DFG -InterfaceIndex $ifIndex

Set-DnsClientServerAddress -InterfaceIndex $ifIndex -ServerAddresses $DNS

#rename computer
Rename-Computer -NewName $ComputerName
Restart-Computer 
